meta2[[2]]
meta2[[4]]
as.character(meta2)
as.string(meta2)
print(meta2)
xpathSApply(meta2,"meta", xmlValue)
lst<-xpathSApply(meta2,"meta", xmlValue)
lst[1]
length(lst)
lst<-xpathSApply(doc,"//meta", xmlValue)
lst
lst[[1]]
meta2
data(meta2)
grep(":", meta2)
class(meta2)
val = xpathSApply(doc,"//head, xmlValue")
val = xpathSApply(doc,"//head", xmlValue)
val
class(val)
dim(val)
length(val)
val = xpathSApply(doc,"//head/meta", xmlValue)
val
val = xpathSApply(doc,"//meta", xmlValue)
class(meta2)
str(meta2)
meta2
?str
strMeta2 <- sapply(meta2, xmlValue)
toString.XMLNode(meta2)
strMeta2 = toString.XMLNode(meta2)
regexpr(".:F", strMeta2)
regexpr("X.:F", strMeta2)
strMeta2[101]
substr(strMeta2, start=90, stop=110)
grep(".:F", strMeta2))
grep(".:F", strMeta2)
grepl(".:F", strMeta2)
grepl(":F", strMeta2)
grep(":F", strMeta2)
gregexpr(":F", strMeta2)
strsplit(strMeta2, " ")
grep(":F", charMeta2)
charMeta2 <- strsplit(strMeta2, " ")
grep(":F", charMeta2)
grep(".:F", charMeta2)
length(charMeta2)
dim(charMeta2)
charMeta2 <- strsplit(strMeta2, " ")
length(charMeta2)
charMeta2[1]
class(charMeta2)
charMeta2 <- strsplit(strMeta2[1], " ")
charMeta2 <- strsplit(strMeta2[[1]], " ")
charMeta2 <- strsplit(strMeta2, " ", fixed=TRUE)
charMeta2[1][16]
charMeta2[[1][16]
charMeta2[[1]][16]
grep(":F", charMeta2[[1]])
strEx = charMeta2[[1]][grep(":F", charMeta2[[1]])]
strEx
library("XML")
fileURL <- paste("http://quotes.morningstar.com/stock/f/s?t=", ticker, sep="")
doc <- htmlTreeParse(fileURL, useInternal=TRUE)
rootNode <- xmlRoot(doc)
hd <- rootNode[["head"]]
meta2 <- hd[[2]]
strMeta2 <- toString.XMLNode(meta2)
charMeta2 <- strsplit(strMeta2, " ", fixed=TRUE)
strPattern = paste(":", ticker, sep="")
strEx = charMeta2[[1]][grep(strPattern, charMeta2[[1]])]
strEx
ticker="MSFT"
library("XML")
fileURL <- paste("http://quotes.morningstar.com/stock/f/s?t=", ticker, sep="")
doc <- htmlTreeParse(fileURL, useInternal=TRUE)
rootNode <- xmlRoot(doc)
hd <- rootNode[["head"]]
meta2 <- hd[[2]]
strMeta2 <- toString.XMLNode(meta2)
charMeta2 <- strsplit(strMeta2, " ", fixed=TRUE)
strPattern = paste(":", ticker, sep="")
strEx = charMeta2[[1]][grep(strPattern, charMeta2[[1]])]
strEx
strEx = sub(strPattern, charMeta2[[1]][grep(strPattern, charMeta2[[1]])], "")
strEx = sub(strPattern, "", charMeta2[[1]][grep(strPattern, charMeta2[[1]])])
length(strEx)
nchar(strEx)
rm(list=ls())
source('~/Documents/Personal/R/FinancialTests/QuadPlotStockData.R')
source('~/Documents/Personal/R/FinancialTests/Morningstar_DownloadData.R')
source('~/Documents/Personal/R/FinancialTests/Morningstar_DownloadData.R')
rm(list=ls())
source('~/Documents/Personal/R/FinancialTests/QuadPlotStockData.R')
GetDataFromURL("MSFT")
GetDataFromURL("F")
rm(list=ls())
GetDataFromURL("MSFT")
source('~/Documents/Personal/R/FinancialTests/QuadPlotStockData.R')
GetDataFromURL("MSFT")
GetMorningstarExchange("MSFT")
source('~/Documents/Personal/R/FinancialTests/Morningstar_DownloadData.R')
GetMorningstarExchange("MSFT")
GetMorningstarExchange("F")
GetDataFromURL("MSFT")
GetDataFromURL("F")
GetDataFromURL("FM")
GetDataFromURL("GM")
QuadPlotStock("GM")
QuadPlotStock("AAPL")
QuadPlotStock("F")
ticker="F"
dfRatios <- GetMorningstarDataFromFile(ticker)
df <- GetYahooDataFromFile(ticker)
df <- df[((df$Date >= min(dfRatios$Date))&(df$Date <= max(dfRatios$Date))), ]
!all(is.na(dfRatios$Dividends)
)
plot(dfRatios$Date, seq(length(dfRatios$Date)), type="n",
xlab="Date", ylab="$/share", main="Dividend")
par(new = FALSE, mfrow=c(2,2))
plot(dfRatios$Date, seq(length(dfRatios$Date)), type="n",
xlab="Date", ylab="$/share", main="Dividend")
(!all(is.na(dfRatios$EPS)))
plot(dfRatios$Date, dfRatios$EPS, col="red", type="l",
xlab="Date", ylab="$/share", main="EPS")
par(new = TRUE) ## Add to the current plot
plot(df$Date, df$Close, type="l", ylab="", xlab="", xaxt="n", yaxt="n")
par(new = FALSE)
all(is.na(dfRatios$Dividends))
dfRatios$Dividends
is.na(dfRatios$Dividends)
all(is.na(dfRatios$Dividends))
!all(is.na(dfRatios$Dividends))
plot(dfRatios$Date, dfRatios$Dividend, col="red", type="l",
xlab="Date", ylab="$/share", main="Dividend")
par(new = TRUE) ## Add to the current plot
plot(df$Date, df$Close, type="l", ylab="", xlab="", xaxt="n", yaxt="n")
par(new = FALSE)
plot(dfRatios$Date, dfRatios$EPS, col="red", type="l",
xlab="Date", ylab="$/share", main="EPS")
par(new = TRUE) ## Add to the current plot
plot(df$Date, df$Close, type="l", ylab="", xlab="", xaxt="n", yaxt="n")
par(new = FALSE)
dfRatios$EPS
plot(dfRatios$Date, dfRatios$EPS, col="red", type="l",
xlab="Date", ylab="$/share", main="EPS")
par(new = TRUE) ## Add to the current plot
plot(df$Date, df$Close, type="l", ylab="", xlab="", xaxt="n", yaxt="n")
df$Date
df$Close
df <- GetYahooDataFromFile(ticker)
df <- GetYahooDataFromFile(ticker)
fileName <- GetYahooFileName(ticker)
fileName
colClasses=c("character", rep("numeric",6))
df <- read.csv(fileName, header=TRUE, colClasses=colClasses)
df$Date2 <- as.Date(df$Date, format="%m/%d/%y")
head(df)
ticker = "MSFT"
fileName <- GetYahooFileName(ticker)
colClasses=c("character", rep("numeric",6))
df <- read.csv(fileName, header=TRUE, colClasses=colClasses)
df$Date2 <- as.Date(df$Date, format="%m/%d/%y")
df
rm(list=ls())
ticker="F"
fileName <- GetYahooFileName(ticker)
colClasses=c("character", rep("numeric",6))
df <- read.csv(fileName, header=TRUE, colClasses=colClasses)
df$Date2 <- as.Date(df$Date, format="%m/%d/%y")
df
source('~/Documents/Personal/R/FinancialTests/Yahoo_DownloadData.R')
fileName <- GetYahooFileName(ticker)
colClasses=c("character", rep("numeric",6))
df <- read.csv(fileName, header=TRUE, colClasses=colClasses)
df$Date2 <- as.Date(df$Date, format="%m/%d/%y")
df
GetYahooDataFromFile("MSFT")
fileName <- GetYahooFileName(ticker)
colClasses=c("character", rep("numeric",6))
df <- read.csv(fileName, header=TRUE, colClasses=colClasses)
head(df)
colClasses=c("character", rep("numeric",6))
df <- read.csv(fileName, header=TRUE, colClasses=colClasses)
head(df)
df$Date <- as.Date(df$Date, format="%y-%m-%d")
df$Date <- as.Date(df$Date, format="%y-%m-%d")
head(df)
colClasses=c("character", rep("numeric",6))
df <- read.csv(fileName, header=TRUE, colClasses=colClasses)
df$Date <- as.Date(df$Date, format="%y-%m-%d")
head(df)
colClasses=c("character", rep("numeric",6))
df <- read.csv(fileName, header=TRUE, colClasses=colClasses)
head(df)
df$Date2 <- as.Date(df$Date, format="%Y-%m-%d")
df$Date2 <- as.Date(df$Date, format="%Y-%m-%d")
head(df)
colClasses=c("character", rep("numeric",6))
df <- read.csv(fileName, header=TRUE, colClasses=colClasses)
df$Date <- as.Date(df$Date, format="%Y-%m-%d")
df
colClasses=c("character", rep("numeric",6))
df <- read.csv(fileName, header=TRUE, colClasses=colClasses)
df$Date <- as.Date(df$Date, format="%Y-%m-%d")
df
rm(list=ls())
source('~/Documents/Personal/R/FinancialTests/QuadPlotStockData.R')
QuadPlotStock("F")
QuadPlotStock("msft")
QuadPlotStock("gm")
QuadPlotStock("intc")
GetDataFromURL("BAX")
QuadPlotStock("BAX")
QuadPlotStock("aapl")
ticker="aapl"
dfRatios <- GetMorningstarDataFromFile(ticker)
dfRatios
GetDataFromURL("AAPL")
QuadPlotStock("AAPL")
mtext(ticker, outer=TRUE)
source('~/Documents/Personal/R/FinancialTests/QuadPlotStockData.R')
QuadPlotStock("AAPL")
QuadPlotStock("intc")
QuadPlotStock("bax")
R.home()
install.packages('RMySQL', type='source')
install.packages('RMySQL', type='source')
install.packages('RMySQL',type='sou
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages("/Users/CPeach/Documents/Personal/R/R_Packages/RMySQL_0.9-3.tar.gz", type="source")
rm(list=ls())
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)  ## Nothing happens!
print(p)  ## Plot appears
xyplot(Ozone ~ Wind, data = airquality)  ## Auto-printing
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind, data = airquality)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2, 1))  ## Plot with 2 panels
## Custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
## Custom panel function
##  add regression line to each panel
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call default panel function
panel.lmline(x, y, col = 2)  ## Overlay a simple linear regression line
})
library(ggplot2)
str(mpg)
install.package("ggplot2", type=source)
install.packages("ggplot2", type=source)
install.packages(ggplot2, type=source)
install.packages('ggplot2', type=source)
install.packages("ggplot2", type="source")
library(ggplot2)
str(mpg)
qplot(disp, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
gplot(displ, hwy)
qplot(displ, hwy)
names(mpg)
mpg$drv
?qplot
#plot 3 - add a statistic (some summary of the data - example a line or curve)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
#plot 3 - add a statistic (some summary of the data - example a line or curve)
qplot(displ, hwy, data=mpg, geom=c("smooth"))
#plot 3 - add a statistic (some summary of the data - example a line or curve)
qplot(displ, hwy, data=mpg, geom=c("point"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(displ, hwy, data=mpg, facets=.~drv, binwidth=2)
qplot(hwy, data=mpg, facets=.~drv, binwidth=2)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=.~drv, binwidth=2)
qplot(hwy, data=mpg, facets=~drv, binwidth=2)
qplot(hwy, data=mpg, facets=~.drv, binwidth=2)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(displ, hwy, data=mpg, facets=.~drv) #3 scatter plots, split on drv levels
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
str(maacs)
qplot(hwy, data = mpg, geom="density")
qplot(hwy, data = mpg, geom=c("points", density") )
qplot(hwy, data = mpg, geom=c("points", "density") )
qplot(hwy, data = mpg, geom=c("point", "density"))
qplot(hwy, data = mpg, geom=c("y", "density"))
qplot(hwy, data = mpg, geom="density")
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg, geom="histogram")
qplot(hwy, data = mpg, geom=c("histogram", "density"))
qplot(hwy, data = mpg, geom="density")
qplot(displ, hwy, data=mpg)
qplot(log(displ), log(hwy), data=mpg)
qplot(log(displ), log(hwy), data=mpg, shape=drv)
qplot(log(displ), log(hwy), data=mpg, color=drv)
qplot(log(displ), log(hwy), data=mpg, color=drv, geom=c("point", "smooth"), method="lm")
qplot(log(displ), log(hwy), data=mpg, color=drv, geom=c("point", "smooth"), method="loess")
qplot(log(displ), log(hwy), data=mpg, color=drv, geom=c("point", "smooth"))#default = loess
qplot(log(displ), log(hwy), data=mpg, color=drv, geom=c("point", "smooth"), method="lm")
qplot(log(displ), log(hwy), data=mpg, facets=.~drv, geom=c("point", "smooth"), method="lm") #3 Facets (panels)
?ggplot2
?ggPlot2
?qplot
?ggplot
class(mpg)
g <- ggplot(df, aes(x, y, <other aesthetics>))
summary(g)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
print(g)
p <- g + geom_point()
p <- g + geom_point()
print(p)
g + geom_point()
?geom_point
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method='lm') #linear regression line
g + geom_point() + gacet_grid(. ~ drv) = geom_smooth(method='lm')
g + geom_point() + gacet_grid(. ~ drv) + geom_smooth(method='lm')
g + geom_point() + facet_grid(. ~ drv) + geom_smooth(method='lm')
g + geom_point(color = "steelblue", size = 4, alpha = 1/2)
g + geom_point(color = bmicat, size = 4, alpha = 1/2)
g + geom_point(color = drv, size = 4, alpha = 1/2)
#note color can be a const value; or assigned to a factor variable
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv))
names(mpg)
g + geom_point(aes(color = drv)) + labs(title="MAACS Cohort")
+ labs(x = expression("Displacement " * PM[2.5]),
y = expression("Mileage"))
g + geom_point(aes(color = drv)) + labs(title="MAACS Cohort")
g + geom_point(aes(color = drv)) + labs(title="MAACS Cohort")
+ labs(x = expression("Displacement " * PM[2.5]))
g + geom_point(aes(color = drv)) + labs(title="MAACS Cohort")
+ labs(x="XXX", y="YYY")
?labs
g + geom_point(aes(color = drv)) + labs(title="MAACS Cohort") +
labs(x="XXX", y="YYY")
g + geom_point(aes(color = drv)) + labs(title="MAACS Cohort") +
+ labs(x = expression("Displacement " * PM[2.5]),
y = "Mileage")
g + geom_point(aes(color = drv)) + labs(title="MAACS Cohort") +
labs(x = expression("Displacement " * PM[2.5]), y = "Mileage"
g + geom_point(aes(color = drv)) + labs(title="MAACS Cohort") +
labs(x = expression("Displacement " * PM[2.5]), y = "Mileage")
g + geom_point(aes(color = drv)) + labs(title="MAACS Cohort") +
labs(x = expression("Displacement " * PM[2.5]), y = "Mileage")
g + geom_point(aes(color = drv), size = 4, alpha = 1/2) +
geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
testdat <- data.frame(x=1:100, y=rnorm(100))
testdat[50,2] <- 100 #create an Outlier in the data
plot(testdat$x, testdat$y, type="l", ylim=c(-3,3))#Base Plot
g<- ggplot(testdat, aes(x=x, y=y))
g + geom_line()
g + geom_line()
rm(list=ls())
testdat <- data.frame(x=1:100, y=rnorm(100))
testdat[50,2] <- 100 #create an Outlier in the data
plot(testdat$x, testdat$y, type="l", ylim=c(-3,3))#Base Plot
g<- ggplot(testdat, aes(x=x, y=y))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim(-3,3))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
rm(list=ls())
## Plot 6:  Which city (Baltimore vs L.A.) has greater change in emissions from motor vehicle sources from 1999 to 2008?
library(ggplot2)
#Read Data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
#Create filtered dataframe with year and emissions columns and sum emissions by year
dfCounties <- data.frame(fips=c("24510", "06037"), countyName=c("Baltimore City", "Los Angeles"))
NEI_Counties <- NEI[NEI$fips %in% dfCounties$fips, ]
SCC_MV <- SCC[grep(".*Veh.*", SCC$EI.Sector), "SCC"]
NEI_Counties_MV <- NEI_Counties[NEI_Counties$SCC %in% SCC_MV, ]
dfYearlyEmissions <- aggregate( x=list("Emissions"=NEI_Counties_MV$Emissions),
by=list("year"=NEI_Counties_MV$year,
"fips"=NEI_Counties_MV$fips),
FUN = sum )
for (fips in dfCounties$fips) {
#Calculate the percent change vs 1999 emission values for each county
dfYearlyEmissions$Percent.Change[dfYearlyEmissions$fips==fips] <-
dfYearlyEmissions$Emissions[dfYearlyEmissions$fips==fips] /
dfYearlyEmissions$Emissions[(dfYearlyEmissions$fips==fips & dfYearlyEmissions$year=="1999")]
#Add the real County Name
dfYearlyEmissions$county[dfYearlyEmissions$fips==fips] <- dfCounties$countyName[dfCounties$fips==fips]
}
#Create plot and save as PNG file
png(filename = "plot6.png", width = 480, height = 480)
qplot(year, Percent.Change, data=dfYearlyEmissions, facets=.~county, geom=c("point")) +
geom_smooth(method='lm') +
ggtitle("Emissions from Motor Vehicle Sources \nin Baltimore City and Los Angeles from 1999 to 2008")
dev.off()
setwd("/Users/cpeach/Documents/Personal/R/Coursera/ExploratoryAnalysis/Ass2")
## Plot 6:  Which city (Baltimore vs L.A.) has greater change in emissions from motor vehicle sources from 1999 to 2008?
library(ggplot2)
#Read Data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
#Create filtered dataframe with year and emissions columns and sum emissions by year
dfCounties <- data.frame(fips=c("24510", "06037"), countyName=c("Baltimore City", "Los Angeles"))
NEI_Counties <- NEI[NEI$fips %in% dfCounties$fips, ]
SCC_MV <- SCC[grep(".*Veh.*", SCC$EI.Sector), "SCC"]
NEI_Counties_MV <- NEI_Counties[NEI_Counties$SCC %in% SCC_MV, ]
dfYearlyEmissions <- aggregate( x=list("Emissions"=NEI_Counties_MV$Emissions),
by=list("year"=NEI_Counties_MV$year,
"fips"=NEI_Counties_MV$fips),
FUN = sum )
for (fips in dfCounties$fips) {
#Calculate the percent change vs 1999 emission values for each county
dfYearlyEmissions$Percent.Change[dfYearlyEmissions$fips==fips] <-
dfYearlyEmissions$Emissions[dfYearlyEmissions$fips==fips] /
dfYearlyEmissions$Emissions[(dfYearlyEmissions$fips==fips & dfYearlyEmissions$year=="1999")]
#Add the real County Name
dfYearlyEmissions$county[dfYearlyEmissions$fips==fips] <- dfCounties$countyName[dfCounties$fips==fips]
}
#Create plot and save as PNG file
png(filename = "plot6.png", width = 480, height = 480)
qplot(year, Percent.Change, data=dfYearlyEmissions, facets=.~county, geom=c("point")) +
geom_smooth(method='lm') +
ggtitle("Emissions from Motor Vehicle Sources \nin Baltimore City and Los Angeles from 1999 to 2008")
dev.off()
dfYearlyEmissions
dfCounties
dfCounties$countyName[dfCounties$fips==fips]
dfYearlyEmissions$county[dfYearlyEmissions$fips==fips]
dfYearlyEmissions$county[dfYearlyEmissions$fips==fips] <- dfCounties$countyName[dfCounties$fips==fips]
dfYearlyEmissions
NEI_Counties_MV
dfYearlyEmissions$county<-""
dfYearlyEmissions
dfYearlyEmissions$county[dfYearlyEmissions$fips==fips] <- dfCounties$countyName[dfCounties$fips==fips]
dfYearlyEmissions
dfCounties$countyName[dfCounties$fips==fips]
dfYearlyEmissions$county[dfYearlyEmissions$fips==fips] <- as.character(dfCounties$countyName[dfCounties$fips==fips])
dfYearlyEmissions
#Create filtered dataframe with year and emissions columns and sum emissions by year
dfCounties <- data.frame(fips=c("24510", "06037"), countyName=c("Baltimore City", "Los Angeles"))
NEI_Counties <- NEI[NEI$fips %in% dfCounties$fips, ]
SCC_MV <- SCC[grep(".*Veh.*", SCC$EI.Sector), "SCC"]
NEI_Counties_MV <- NEI_Counties[NEI_Counties$SCC %in% SCC_MV, ]
dfYearlyEmissions <- aggregate( x=list("Emissions"=NEI_Counties_MV$Emissions),
by=list("year"=NEI_Counties_MV$year,
"fips"=NEI_Counties_MV$fips),
FUN = sum )
for (fips in dfCounties$fips) {
#Calculate the percent change vs 1999 emission values for each county
dfYearlyEmissions$Percent.Change[dfYearlyEmissions$fips==fips] <-
dfYearlyEmissions$Emissions[dfYearlyEmissions$fips==fips] /
dfYearlyEmissions$Emissions[(dfYearlyEmissions$fips==fips & dfYearlyEmissions$year=="1999")]
#Add the real County Name
dfYearlyEmissions$county[dfYearlyEmissions$fips==fips] <- as.character(dfCounties$countyName[dfCounties$fips==fips])
}
#Create plot and save as PNG file
png(filename = "plot6.png", width = 480, height = 480)
qplot(year, Percent.Change, data=dfYearlyEmissions, facets=.~county, geom=c("point")) +
geom_smooth(method='lm') +
ggtitle("Emissions from Motor Vehicle Sources \nin Baltimore City and Los Angeles from 1999 to 2008")
dev.off()
?qplot
qplot(year, Percent.Change, data=dfYearlyEmissions, facets=.~county, geom=c("point")) +
geom_smooth(method='lm') +
scale_y_continuous(formatter = 'percent') +
ggtitle("Percent Change in Emissions from Motor Vehicle Sources \nin Baltimore City and Los Angeles from 1999 to 2008")
?scale_y_continuous
qplot(year, Percent.Change, data=dfYearlyEmissions, facets=.~county, geom=c("point")) +
geom_smooth(method='lm') +
scale_y_continuous(formatter="percent") +
ggtitle("Percent Change in Emissions from Motor Vehicle Sources \nin Baltimore City and Los Angeles from 1999 to 2008")
qplot(year, Percent.Change, data=dfYearlyEmissions, facets=.~county, geom=c("point")) +
geom_smooth(method='lm') +
scale_y_continuous(percent_format()) +
ggtitle("Percent Change in Emissions from Motor Vehicle Sources \nin Baltimore City and Los Angeles from 1999 to 2008")
qplot(year, Percent.Change, data=dfYearlyEmissions, facets=.~county, geom=c("point")) +
geom_smooth(method='lm') +
scale_y_continuous(labels=percent_format()) +
ggtitle("Percent Change in Emissions from Motor Vehicle Sources \nin Baltimore City and Los Angeles from 1999 to 2008")
library(scale)
?packages.install
install.packages('scale')
library(scales)
qplot(year, Percent.Change, data=dfYearlyEmissions, facets=.~county, geom=c("point")) +
geom_smooth(method='lm') +
scale_y_continuous(labels=percent_format()) +
ggtitle("Percent Change in Emissions from Motor Vehicle Sources \nin Baltimore City and Los Angeles from 1999 to 2008")
#Create plot and save as PNG file
png(filename = "plot6.png", width = 480, height = 480)
qplot(year, Percent.Change, data=dfYearlyEmissions, facets=.~county, geom=c("point")) +
geom_smooth(method='lm') +
scale_y_continuous(labels=percent_format()) +
ggtitle("Percent Change in Emissions from Motor Vehicle Sources \nin Baltimore City and Los Angeles from 1999 to 2008")
dev.off()
